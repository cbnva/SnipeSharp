{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    "GetSingleValue": {
        "scope": "csharp",
        "prefix": "$GetSingleValue",
        "body": [
            "if (!GetSingleValue(${1}, out var ${1/(.)/${1:/downcase}/}))",
            "    return false;",
            "item.${2:property} = ${1/(.)/${1:/downcase}/};$0"
        ],
        "description": "GetSingleValue."
    },
    "GetSingleValueBoundParameter" : {
        "scope": "csharp",
        "prefix": "$MyInvocationGetSingleValue",
        "body": [
            "if (MyInvocation.BoundParameters.ContainsKey(nameof(${1})))",
            "{",
            "    if (!GetSingleValue(${1}, out var ${1/(.)/${1:/downcase}/}$2))",
            "        return$3;",
            "    item.$4 = ${1/(.)/${1:/downcase}/};",
            "}$0"
        ],
        "description": "MyInvocation.BoundParameter check with GetSingleValue."
    },
    "FilterValue": {
        "scope": "csharp",
        "prefix": "$FilterValue",
        "description": "FilterValue.",
        "body": [
            "if (MyInvocation.BoundParameters.ContainsKey(nameof(${1})))",
            "{",
            "    if(!this.GetSingleValue(${1}, out var ${1/(.)/${1:/downcase}/}, required: true))",
            "        return false;",
            "    filter.${1} = ${1/(.)/${1:/downcase}/};$0",
            "}"
        ]
    },
    "PatchableValue": {
        "scope": "csharp",
        "prefix": "$PatchableValue",
        "description": "A Property with backing field and modified field.",
        "body": [
            "[Patch(nameof(is${2:$CLIPBOARD}Modified))]",
            "public ${1:type} ${2}",
            "{",
            "    get => ${2/(.)/${1:/downcase}/};",
            "    set",
            "    {",
            "        is$2Modified = true;",
            "        ${2/(.)/${1:/downcase}/} = value;",
            "    }",
            "}",
            "private bool is$2Modified = false;",
            "private ${1} ${2/(.)/${1:/downcase}/};"
        ]
    },
    "OnDeserialized": {
        "scope": "csharp",
        "prefix": "$OnDeserialized",
        "description": "OnDeserialized with a call to IPatchable.SetAllModifiedState(bool)",
        "body": [
            "[OnDeserialized]",
            "private void OnDeserialized(StreamingContext context)",
            "{",
            "    ((IPatchable)this).SetAllModifiedState(false);",
            "}"
        ]
    }
}
