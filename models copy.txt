type CheckoutToType = 'location' | 'asset' | 'user';
type CheckoutError = {
    asset: string|Pick<Asset, 'id' | 'asset_tag'>,
    target_id?: int,
    target_type?: CheckoutToType
};

type RequestableType = string; // TODO: snake_case(class_basename(this->requestable_type))
type ProfileControllerRequestedAsset = {
    image: Uri, // TODO: null?
    type: RequestableType,
    qty: int, // TODO: null? checkoutRequest->quantity,
};

type TODO = undefined;
type ActionLog = {
    id: int,
    icon: string, // TODO: check?
    file: null | {
        url: string,// TODO: URI?
        filename: string,
        inlineable: boolean
    },
    item: null | {
        id: int,
        name: string,
        type: string // TODO
    },
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    next_audit_date: null|FormattedDate,
    days_to_next_audit: TODO,
    action_type: TODO,
    admin: null|Pick<User, 'id'|'name'|'first_name'|'last_name'>,
    target: null|{
        id: int,
        name: string,
        type: string // TODO
    },
    note: string|null,
    signature_file: string|null, // TODO: URI?
    log_meta: null|Map<string, Map<'old' | 'new', string|null>>
    action_date: null|FormattedDateTime
}

type Asset = {
    // TODO custom fields
};

type CheckedOutAccessoryUser = {
    type: 'user',
};

type CheckedOutComponent = {
    assigned_pivot_id: int,
    id: int,
    name: string,
    qty: int, //TODO asset->pivot->assigned_qty
    type: 'asset',
    created_at: FormattedDateTime,
    available_actions: {
        checkin: true
    }
};

type LaravelLinkToRoute<Route,Title,Parameter> = string; // TODO
type ConsumableDataView = {
    name: LaravelLinkToRoute<'users.show', 'fullName', 'id'> | 'DeletedUser',
    created_at: FormattedDateTime,
    admin: LaravelLinkToRoute<'TODO', 'TODO', 'TODO'> | ''
};

type CustomFieldWithDefaultValue = {
    id: int,
    name: string,
    type: string, // TODO enum
    field_values_array: string[]|null,
    default_value: string
};

type Import = {
    // TODO
};
type ImportResponse = {
    files: Import[]
};

type Kit = {
    id: int,
    name: string,
    user_can_checkout: true,
    available_actions: {
        update: boolean,
        delete: boolean,
        checkout: boolean
    }
};

type KitElement = {
    id: int,
    pivot_id: int,
    owner_id: int,
    quantity: int,
    name: string,
    available_actions: {
        update: boolean,
        delete: boolean
    }
};

type SlackMessageStrings = 'Success'
                         | 'Something went wrong :('
                         | 'Oops! Please check the channel name and webhook endpoint URL. Slack responded with: `$e->getMessage()`';
type Message<T> = {
    message: T
};

type StatusLabelAssetcountObject = {
    labels: string[],
    datasets: [
        {
            data: int[],
            backgroundColor: HexColor[],
            hoverBackgroundcolor: HexColor[]
        }
    ]
};
