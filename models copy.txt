// List of Models in SnipeIT 5
type CheckoutToType = 'location' | 'asset' | 'user';
type CheckoutError = {
    asset: string|Pick<Asset, 'id' | 'asset_tag'>,
    target_id?: int,
    target_type?: CheckoutToType
};

type RequestableType = string; // TODO: snake_case(class_basename(this->requestable_type))
type ProfileControllerRequestedAsset = {
    image: Uri, // TODO: null?
    type: RequestableType,
    qty: int, // TODO: null? checkoutRequest->quantity,
};

type FormattedCurrency = string; // #.##
type Accessory = {
    id: int,
    name: string,
    image: Uri|null,
    company: Pick<Company, 'id' | 'name'>|null,
    manufacturer: Pick<Manufacturer, 'id' | 'name'>|null,
    supplier: Pick<Supplier, 'id' | 'name'>|null,
    model_number: string|null,
    category: Pick<Category, 'id' | 'name'> | null,
    location: Pick<SnipeLocation, 'id' | 'name'> | null,
    notes: string|null,
    qty: int|null,
    purchase_date: FormattedDate|null,
    purchase_cost: FormattedCurrency,
    order_number: string|null,
    min_qty: int|null,
    remaining_qty: int, // can be negative if qty is null -- this makes no sense, but is the way it is

    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    available_actions: {
        checkout: boolean,
        checkin: false,
        update: boolean,
        delete: boolean
    },
    user_can_checkout: boolean
};

type TODO = undefined;
type ActionLog = {
    id: int,
    icon: string, // TODO: check?
    file: null | {
        url: string,// TODO: URI?
        filename: string,
        inlineable: boolean
    },
    item: null | {
        id: int,
        name: string,
        type: string // TODO
    },
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    next_audit_date: null|FormattedDate,
    days_to_next_audit: TODO,
    action_type: TODO,
    admin: null|Pick<User, 'id'|'name'|'first_name'|'last_name'>,
    target: null|{
        id: int,
        name: string,
        type: string // TODO
    },
    note: string|null,
    signature_file: string|null, // TODO: URI?
    log_meta: null|Map<string, Map<'old' | 'new', string|null>>
    action_date: null|FormattedDateTime
}

type Asset = {
    id: int,
    name: string|null,
    asset_tag: string,
    // TODO
};

type CheckedOutAccessoryUser = {
    assigned_pivot_id: int,
    id: int,
    username: string,
    name: string,
    first_name: string,
    last_name: string,
    employee_number: string,
    checkout_notes: string,//TODO
    last_checkout: FormattedDateTime,
    type: 'user',
    available_actions: {
        checkin: true
    }
};

type CategoryType = 'asset' | 'accessory' | 'consumable' | 'component' | 'license';
type UpperCategoryType = 'Asset' | 'Accessory' | 'Consumable' | 'Component' | 'License';
type Category = {
    id: int,
    name: string,
    image: Uri|null,
    category_type: UpperCategoryType,
    has_eula: boolean,
    eula: string|null,
    checkin_email: boolean,
    require_acceptance: boolean,
    item_count: int,
    assets_count: int,
    accessories_count: int,
    consumables_count: int,
    components_count: int,
    licenses_count: int,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    available_actions: {
        update: boolean,
        delete: boolean
    }
};

type Component = {
    id: int,
    name: string,
    image: Uri|null,
    serial: string|null,
    location: null|Pick<SnipeLocation, 'id' | 'name'>,
    qty: int|null,
    min_amt: int|null,
    category: null|Pick<Category, 'id' | 'name'>,
    order_number: string,
    purchase_date: FormattedDate,
    purchase_cost: FormattedCurrency,
    remaining: int,
    company: null|Pick<Company, 'id' | 'name'>,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    user_can_checkout: 1 | 0,
    available_actions: {
        checkout: boolean,
        checkin: boolean,
        update: boolean,
        delete: boolean
    }
};

type CheckedOutComponent = {
    assigned_pivot_id: int,
    id: int,
    name: string,
    qty: int, //TODO asset->pivot->assigned_qty
    type: 'asset',
    created_at: FormattedDateTime,
    available_actions: {
        checkin: true
    }
};

type Consumable = {
    id: int,
    name: string,
    image: Uri|null,
    category: null|Pick<Category, 'id' | 'name'>,
    company: null|Pick<Company, 'id' | 'name'>,
    item_no: string,
    location: null|Pick<SnipeLocation, 'id' | 'name'>,
    manufacturer: null|Pick<Manufacturer, 'id' | 'name'>,
    min_amt: int,
    model_number: string|null,
    remaining: int, // can be negative?
    order_number: string,
    purchase_cost: FormattedCurrency,
    purchase_date: FormattedDate,
    qty: int,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    user_can_checkout: false,
    available_actions: {
        'checkout': boolean,
        'checkin': boolean,
        'update': boolean,
        'delete': boolean
    }
};

type LaravelLinkToRoute<Route,Title,Parameter> = string; // TODO
type ConsumableDataView = {
    name: LaravelLinkToRoute<'users.show', 'fullName', 'id'> | 'DeletedUser',
    created_at: FormattedDateTime,
    admin: LaravelLinkToRoute<'TODO', 'TODO', 'TODO'> | ''
};

type CustomField = {
    id: int,
    name: string,
    db_column_name: string,
    format: string,
    field_values: string|null,
    field_values_array: string[]|null,
    type: string, // TODO enum
    required: boolean, // TODO field->pivot->required
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime
};

type CustomFieldWithDefaultValue = {
    id: int,
    name: string,
    type: string, // TODO enum
    field_values_array: string[]|null,
    default_value: string
};

type MonthsString = string; // \d Months
type Depreciation = {
    id: int,
    name: string,
    months: MonthsString,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    available_actions: {
        update: boolean,
        delete: boolean
    }
};

type Fieldset = {
    id: int,
    name: string,
    fields: DataTable<CustomField>,
    models: DataTable<Pick<Model, 'id' | 'name'>>,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime
};

type GroupPermissions = object; // TODO: group permissions from json (WHY)
type Group = {
    permissions: GroupPermissions,
};

type Import = {
    // TODO
};
type ImportResponse = {
    files: Import[]
};

type Kit = {
    id: int,
    name: string,
    user_can_checkout: true,
    available_actions: {
        update: boolean,
        delete: boolean,
        checkout: boolean
    }
};

type KitElement = {
    id: int,
    pivot_id: int,
    owner_id: int,
    quantity: int,
    name: string,
    available_actions: {
        update: boolean,
        delete: boolean
    }
};

type License = {
    id: int,
    name: string,
    company: null|Pick<Company,'id'|'name'>,
    manufacturer: null|Pick<Manufacturer, 'id' | 'name'>,
    product_key: string|'------------',
    order_numeber: string,
    purchase_order: string,
    purchase_date: FormattedDate,
    purchase_cost: string,
    notes: string,
    expiration_date: FormattedDate,
    seats: int,
    free_seats_count: int,
    license_name: string,
    license_email: string,
    reassignable: boolean,
    maintained: boolean,
    supplier: null|Pick<Supplier, 'id' | 'name'>,
    category: null|Pick<Category, 'id' | 'name'>,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    user_can_checkout: boolean,
    available_actions: {
        checkout: boolean,
        checkin: boolean,
        clone: boolean,
        update: boolean,
        delete: boolean
    }
}

type LoginAttempt = {
    id: int,
    username: string,
    user_agent: string,
    remote_ip: '--'|string,
    successful: string, // TODO: there has to be a better type for this
    created_at: FormattedDateTime
}

type Model = {
    id: int,
    name: string,
    manufacturer: null|Pick<Manufacturer, 'id' | 'name'>,
    image: string|null,
    model_number: string,
    depreciation: null|Pick<Depreciation, 'id' | 'name'>,
    assets_count: int,
    category: null|Pick<Category, 'id' | 'name'>,
    fieldset: null|Pick<Fieldset, 'id' | 'name'>,
    eol: 'None' | MonthsString,
    requestable: boolean,
    notes: string,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    deleted_at: FormattedDateTime,
    available_actions: {
        update: boolean,
        delete: boolean,
        clone: boolean,
        restore: boolean
    }
}

type SlackMessageStrings = 'Success'
                         | 'Something went wrong :('
                         | 'Oops! Please check the channel name and webhook endpoint URL. Slack responded with: `$e->getMessage()`';
type Message<T> = {
    message: T
};

type StatusLabel = {
    id: int,
    name: string,
    type: StatusLabelType,
    color: HexColor|null,
    show_in_nav: boolean,
    default_label: boolean,
    assets_count: int,
    notes: string,
    created_at: FormattedDateTime,
    updated_at: FormattedDateTime,
    available_actions: {
        update: boolean,
        delete: boolean
    }
};
type HexColor = string;
type StatusLabelAssetcountObject = {
    labels: string[],
    datasets: [
        {
            data: int[],
            backgroundColor: HexColor[],
            hoverBackgroundcolor: HexColor[]
        }
    ]
};

type User = {
    permissions: TODO
};
